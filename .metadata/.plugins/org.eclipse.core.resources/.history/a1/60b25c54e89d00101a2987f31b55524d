package com.microservice.product_service.service;

import com.microservice.product_service.exception.ProductException;
import com.microservice.product_service.model.ProductModel;
import com.microservice.product_service.repository.ProductRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProductService {
    private static final Logger logger = LoggerFactory.getLogger(ProductService.class);

    @Autowired
    private ProductRepository productRepository;

    public ProductModel addProduct(ProductModel product) {
        logger.info("Adding product: {}", product.getName());
        if (product.getQuantity() < 0) {
            throw new ProductException("Quantity cannot be negative");
        }
        return productRepository.save(product);
    }

    public List<ProductModel> getAllProducts() {
        logger.info("Fetching all products");
        return productRepository.findAll();
    }

    public void deleteProduct(Long id) {
        logger.info("Deleting product with id: {}", id);
        if (!productRepository.existsById(id)) {
            throw new ProductException("Product not found with id: " + id);
        }
        productRepository.deleteById(id);
    }

    public List<ProductModel> getProductsByPriceRange(Double minPrice, Double maxPrice) {
        logger.info("Fetching products in price range: {}-{}", minPrice, maxPrice);
        return productRepository.findByPriceBetween(minPrice, maxPrice);
    }

    public List<ProductModel> getProductsByName(String name) {
        logger.info("Fetching products by name: {}", name);
        return productRepository.findByNameContaining(name);
    }

    public List<ProductModel> getProductsByCategory(String category) {
        logger.info("Fetching products by category: {}", category);
        return productRepository.findByCategory(category);
    }
}