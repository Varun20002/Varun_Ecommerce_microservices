package com.microservice.user_service;

import com.microservice.user_service.exception.UserException;
import com.microservice.user_service.model.UserModel;
import com.microservice.user_service.model.Role;  // Assuming Role is in UserModel
import com.microservice.user_service.repository.UserRepository;
import com.microservice.user_service.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class UnitTesting {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserService userService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testAddUser_Success() {
        UserModel user = new UserModel(1L, "Test User", Role.CUSTOMER, Collections.emptyList());
        when(userRepository.save(any(UserModel.class))).thenReturn(user);

        UserModel result = userService.addUser(user);
        assertEquals("Test User", result.getName());
    }

    @Test
    void testAddUser_EmptyName() {
        UserModel user = new UserModel(1L, "", Role.CUSTOMER, Collections.emptyList());
        assertThrows(UserException.class, () -> userService.addUser(user));
    }

    @Test
    void testUpdateUser_Success() {
        UserModel existing = new UserModel(1L, "Old", Role.CUSTOMER, Collections.emptyList());
        UserModel updated = new UserModel(1L, "New", Role.ADMIN, Collections.emptyList());
        when(userRepository.findById(1L)).thenReturn(Optional.of(existing));
        when(userRepository.save(any(UserModel.class))).thenReturn(updated);

        UserModel result = userService.updateUser(1L, updated);
        assertEquals("New", result.getName());
        assertEquals(Role.ADMIN, result.getRole());
    }

    @Test
    void testUpdateUser_NotFound() {
        when(userRepository.findById(1L)).thenReturn(Optional.empty());
        assertThrows(UserException.class, () -> userService.updateUser(1L, new UserModel()));
    }

    @Test
    void testDeleteUser_Success() {
        when(userRepository.existsById(1L)).thenReturn(true);
        userService.deleteUser(1L);
        verify(userRepository, times(1)).deleteById(1L);
    }

    @Test
    void testDeleteUser_NotFound() {
        when(userRepository.existsById(1L)).thenReturn(false);
        assertThrows(UserException.class, () -> userService.deleteUser(1L));
    }

    @Test
    void testGetAllUsers() {
        when(userRepository.findAll()).thenReturn(Collections.emptyList());
        assertTrue(userService.getAllUsers().isEmpty());
    }

    @Test
    void testAddOrderToUser() {
        UserModel user = new UserModel(1L, "Test", Role.CUSTOMER, new java.util.ArrayList<>());
        when(userRepository.findById(1L)).thenReturn(Optional.of(user));
        when(userRepository.save(any(UserModel.class))).thenReturn(user);

        userService.addOrderToUser(1L, 100L);
        assertTrue(user.getOrdersList().contains(100L));
    }
}