package com.microservice.api_gateway.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class ApiGatewaySecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()  // Disable CSRF for API
            .authorizeHttpRequests(authorize -> authorize
                // Open routes if any (e.g., discovery)
                .requestMatchers("/eureka/**").permitAll()
                // Swagger open or protected
                .requestMatchers("/**/swagger-ui/**", "/**/api-docs/**").permitAll()
                // Admin-only: add/delete products
                .requestMatchers("/products").hasRole("ADMIN")  // Assuming POST for add
                .requestMatchers("/products/**").hasRole("ADMIN")  // DELETE/PUT
                // Customer/Admin: place orders
                .requestMatchers("/orders").hasAnyRole("CUSTOMER", "ADMIN")
                // All authenticated: get users/orders/products
                .requestMatchers("/users/**", "/orders/**", "/products/**").authenticated()
                // Any other requests require auth
                .anyRequest().authenticated()
            )
            .httpBasic();  // Basic Auth

        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        UserDetails admin = User.withDefaultPasswordEncoder()
                .username("admin")
                .password("adminpass")
                .roles("ADMIN")
                .build();

        UserDetails customer = User.withDefaultPasswordEncoder()
                .username("customer")
                .password("custpass")
                .roles("CUSTOMER")
                .build();

        return new InMemoryUserDetailsManager(admin, customer);
    }
}